{
  
    
        "post0": {
            "title": "Title",
            "content": "The whole thing is a rip-off of Kevin Systrom article changed to work on italian data. . Estimating COVID-19&#39;s $R_t$ in Real-Time . Kevin Systrom - April 12 . In any epidemic, $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions. . As a pandemic evolves, increasing restrictions (or potential releasing of restrictions) change $R_t$. Knowing the current $R_t$ is essential. When $R&gt;1$, the pandemic will spread through the entire population. If $R_t&lt;1$, the pandemic will grow to some fixed number less than the population. The lower $R_t$, the more manageable the situation. The value of $R_t$ helps us (1) understand how effective our measures have been controlling an outbreak and (2) gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. Well-respected epidemiologists argue that tracking $R_t$ is the only way to manage through this crisis. . Yet, today, to my knowledge there is no real-time tracking of $R_t$ in United States. In fact, the only real-time measure I&#39;ve seen has been for Hong Kong. More importantly, it is not useful to understand $R_t$ at a national level. Instead, to manage this crisis effectively, we need a local (state, county and/or city) level granularity of $R_t$. . What follows is a solution to this problem at the US State level. It&#39;s a modified version of a solution created by Bettencourt &amp; Ribeiro 2008 to estimate real-time $R_t$ using a Bayesian approach. While I have stayed true to most of their process, my solution differs in an important way that I will call out clearly. . If you have questions, comments, or improvments feel free to get in touch: hello@systrom.com. And if it&#39;s not entirely clear, I&#39;m not an epidemiologist. At the same time, data is data, and statistics are statistics and this is based on work by well-known epidemiologists so calibrate accordingly. In the meantime, I hope you can learn something new as I did by reading through this example. Feel free to take this work and apply it elsewhere – internationally or to counties in the United States. . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output # tutte le regioni con meno di 500 casi FILTERED_REGIONS = [ &#39;Molise&#39;, &#39;Basilicata&#39; ] %config InlineBackend.figure_format = &#39;retina&#39; . Bettencourt &amp; Ribeiro&#39;s Approach . Every day, we learn how many more people have COVID-19. This new case count gives us a clue about the current value of $R_t$. We also, figure that the value of $R_t$ today is related to the value of $R_{t-1}$ (yesterday&#39;s value) and every previous value of $R_{t-m}$ for that matter. . With these insights, the authors use Bayes&#39; rule to update their beliefs about the true value of $R_t$ based on how many new cases have been reported each day. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(R_t) cdot mathcal{L}(R_t|k)}{P(k)} $$ . This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The prior beliefs of the value of $P(R_t)$ without the data ... | times the likelihood of $R_t$ given that we&#39;ve seen $k$ new cases ... | divided by the probability of seeing this many cases in general. | . Importantly, $P(k)$ is a constant, so the numerator is proportional to the posterior. Since all probability distributions sum to 1.0, we can ignore $P(k)$ and normalize our posterior to sum to 1.0: . $$ P(R_t|k) propto P(R_t) cdot mathcal{L}(R_t|k) $$ . This is for a single day. To make it iterative: every day that passes, we use yesterday&#39;s conclusion (ie. posterior) $P(R_{t-1}|k_{t-1})$ to be today&#39;s prior $P(R_t)$ so on day two: . $$ P(R_2|k) propto P(R_0) cdot mathcal{L}(R_2|k_2) cdot mathcal{L}(R_1|k_1) $$ . And more generally: . $$ P(R_t|k_t) propto P(R_0) cdot { displaystyle prod^{T}_{t=0}} mathcal{L}(R_t|k_t) $$ . With a uniform prior $P(R_0)$, this reduces to: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=0}} mathcal{L} left(R_t|k_t right) $$ . My Proposed Modification . This works fine, but it suffers from an issue: the posterior on any given day is equally influenced by the distant past as much as the recent day. For epidemics that have $R_t&gt;1$ for a long time and then become under control ($R_t&lt;1$), the posterior gets stuck. It cannot forget about the many days where $R_t&gt;1$ so eventually $P(R_t|k)$ asymptotically approaches 1 when we know it&#39;s well under 1. The authors note this in the paper as a footnote. Unfortunately this won&#39;t work for us. The most critical thing to know is when we&#39;ve dipped below the 1.0 threshold! . So, I propose to only incorporate the last $m$ days of the likelihood function. By doing this, the algorithm&#39;s prior is built based on the recent past which is a much more useful prior than the entire history of the epidemic. So this simple, but important change leads to the following: . $$ P(R_t|k_t) propto { displaystyle prod^{T}_{t=T-m}} mathcal{L} left(R_t|k_t right) $$ . While this takes the last $m$ priors into account equally, you can decide to apply a windowing function (such as an exponential) to favor recent priors over more distant. . Choosing a Likelihood Function $ mathcal{L} left(R_t|k_t right)$ . A likelihood function function says how likely a value of $R_t$ is given an observed number of new cases $k$. . Any time you need to model &#39;arrivals&#39; over some time period of time, statisticians like to use the Poisson Distribution. Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . # Column vector of k k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) . (70, 4) . Note:this was a terse expression which makes it tricky. All I did was to make $k$ a column. By giving it a column for $k$ and a &#39;row&#39; for lambda it will evaluate the pmf over both and produce an array that has $k$ rows and lambda columns. This is an efficient way of producing many distributions all at once, and you will see it used again below! . fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . The Poisson distribution says that if you think you&#39;re going to have $ lambda$ cases per day, you&#39;ll probably get that many, plus or minus some variation based on chance. . But in our case, we know there have been $k$ cases and we need to know what value of $ lambda$ is most likely. In order to do this, we fix $k$ in place while varying $ lambda$. This is called the likelihood function. . For example, imagine we observe $k=20$ new cases, and we want to know how likely each $ lambda$ is: . k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $L left( lambda|k_t right)$&#39;); . This says that if we see 20 cases, the most likely value of $ lambda$ is (not surprisingly) 20. But we&#39;re not certain: it&#39;s possible lambda was 21 or 17 and saw 20 new cases by chance alone. It also says that it&#39;s unlikely $ lambda$ was 40 and we saw 20. . Great. We have $ mathcal{L} left( lambda_t|k_t right)$ which is parameterized by $ lambda$ but we were looking for $ mathcal{L} left(R_t|k_t right)$ which is parameterized by $R_t$. We need to know the relationship between $ lambda$ and $R_t$ . Connecting $ lambda$ and $R_t$ . The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . where $ gamma$ is the reciprocal of the serial interval (about 4 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . $$ mathcal{L} left(R_t|k right) = frac{ lambda^k e^{- lambda}}{k!}$$ . Evaluating the Likelihood Function . To contiue our example, let&#39;s imagine a sample of new case counts $k$. What is the likelihood of different values of $R_t$ on each of those days? . k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/6/20-0357_article GAMMA = 1/4 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t / np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,7) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . You can see that each day we have a independent guesses for $R_t$. The goal is to combine the information we have about previous days with the current day. To do this, we use Bayes&#39; theorem. . Performing the Bayesian Update . To perform the Bayesian update, we need to multiply the likelihood by the prior (which is just the previous day&#39;s likelihood) to get the posteriors. Let&#39;s do that using the cumulative product of each successive day: . posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,7) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . Notice how on Day 1, our posterior matches Day 1&#39;s likelihood from above? That&#39;s because we have no information other than that day. However, when we update the prior using Day 2&#39;s information, you can see the curve has moved left, but not nearly as left as the likelihood for Day 2 from above. This is because Bayesian updating uses information from both days and effectively averages the two. Since Day 3&#39;s likelihood is in between the other two, you see a small shift to the right, but more importantly: a narrower distribution. We&#39;re becoming more confident in our believes of the true value of $R_t$. . From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; . most_likely_values = posteriors.idxmax(axis=0) . We can also obtain the highest density intervals for $R_t$: . Note: I apologize in advance for the clunky brute force HDI algorithm. Please let me know if there are better ones out there. . def highest_density_interval(pmf, p=.95): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col]) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[&#39;Low&#39;, &#39;High&#39;]) hdi = highest_density_interval(posteriors, p=.95) . Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. . ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low&#39;], hdi[&#39;High&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . We can see that the most likely value of $R_t$ changes with time and the highest-density interval narrows as we become more sure of the true value of $R_t$ over time. Note that since we only had four days of history, I did not apply my windowing modification to this sample. Next, however, we&#39;ll turn to a real-world application where this modification is necessary. . Real-World Application to US IT Data . Setup . Load US state case data from the NYT archive . load IT region case data from the dpc archive . # url = &#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv&#39; url = &#39;https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv&#39; regions = pd.read_csv(url, #usecols=[0, 3, 10,12, 14], usecols=[0, 3, 15], # index_col= [ &#39;denominazione_regione&#39;, &#39;totale_positivi&#39;, &#39;deceduti&#39;], #header = 0, #names = [&#39;data&#39;, &#39;denominazione_regione&#39;, &#39;totale_positivi&#39;, &#39;deceduti&#39;], index_col = [&#39;denominazione_regione&#39;, &#39;data&#39;], parse_dates=[&#39;data&#39;], squeeze=True).sort_index() . Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that. . Also, case reporting is very erratic based on testing backlogs, etc. To get the best view of the &#39;true&#39; data we can, I&#39;ve applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you&#39;d imagine the real world process is not nearly as stochastic as the actual reporting. . region_name = &#39;Umbria&#39; def prepare_cases(cases): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=2).round() zeros = smoothed.index[smoothed.eq(0)] if len(zeros) == 0: idx_start = 0 else: last_zero = zeros.max() idx_start = smoothed.index.get_loc(last_zero) + 1 smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed cases = regions.xs(region_name).rename(f&quot;{region_name} cases&quot;) original, smoothed = prepare_cases(cases) original.plot(title=f&quot;{region_name} New Cases per Day&quot;, c=&#39;k&#39;, linestyle=&#39;:&#39;, alpha=.5, label=&#39;Actual&#39;, legend=True, figsize=(600/72, 400/72)) ax = smoothed.plot(label=&#39;Smoothed&#39;, legend=True) ax.get_figure().set_facecolor(&#39;w&#39;) . Running the Algorithm . Just like the example before, we create lambda based on the previous day&#39;s counts from all values of $R_t$. Unlike the previous example, I now evaluate the log of the Poisson. Why? It makes windowing easier. . Since $ log{ab}= log{a}+ log{b}$, we can do a rolling sum over the last $m$ periods and then exponentiate to get the rolling product of the original values. This does not change any of the numbers – it&#39;s just a convenience. . def get_posteriors(sr, window=7, min_periods=1): lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Note: if you want to have a Uniform prior you can use the following line instead. # I chose the gamma distribution because of our prior knowledge of the likely value # of R_t. # prior0 = np.full(len(r_t_range), np.log(1/len(r_t_range))) prior0 = np.log(sps.gamma(a=3).pdf(r_t_range) + 1e-14) likelihoods = pd.DataFrame( # Short-hand way of concatenating the prior and likelihoods data = np.c_[prior0, sps.poisson.logpmf(sr[1:].values, lam)], index = r_t_range, columns = sr.index) # Perform a rolling sum of log likelihoods. This is the equivalent # of multiplying the original distributions. Exponentiate to move # out of log. posteriors = likelihoods.rolling(window, axis=1, min_periods=min_periods).sum() posteriors = np.exp(posteriors) # Normalize to 1.0 posteriors = posteriors.div(posteriors.sum(axis=0), axis=1) return posteriors posteriors = get_posteriors(smoothed) . The Result . Below you can see every day (row) of the posterior distribution plotted simultaneously. The posteriors start without much confidence (wide) and become progressively more confident (narrower) about the true value of $R_t$ . ax = posteriors.plot(title=f&#39;{region_name} - Daily Posterior for $R_t$&#39;, legend=False, lw=1, c=&#39;k&#39;, alpha=.3, xlim=(0.4,4)) ax.set_xlabel(&#39;$R_t$&#39;); . Plotting in the Time Domain with Credible Intervals . Since our results include uncertainty, we&#39;d like to be able to view the most likely value of $R_t$ along with its highest-density interval. . # Note that this takes a while to execute - it&#39;s not the most efficient algorithm hdis = highest_density_interval(posteriors) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) # Look into why you shift -1 result = pd.concat([most_likely, hdis], axis=1) result.tail() . ML Low High . data . 2020-04-13 17:00:00 0.06 | 0.0 | 1.01 | . 2020-04-14 17:00:00 0.15 | 0.0 | 1.16 | . 2020-04-15 17:00:00 0.20 | 0.0 | 1.29 | . 2020-04-16 17:00:00 0.22 | 0.0 | 1.41 | . 2020-04-17 17:00:00 0.54 | 0.0 | 1.72 | . def plot_rt(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;data&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0,3.5) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;data&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) fig, ax = plt.subplots(figsize=(600/72,400/72)) plot_rt(result, ax, region_name) ax.set_title(f&#39;Real-time $R_t$ for {region_name}&#39;) ax.set_ylim(0,3.5) ax.xaxis.set_major_locator(mdates.WeekdayLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) . Repeat the Process for Every State . results = {} states_to_process = regions.loc[~regions.index.get_level_values(&#39;denominazione_regione&#39;).isin(FILTERED_REGIONS)] for state_name, cases in states_to_process.groupby(level=&#39;denominazione_regione&#39;): clear_output(wait=True) print(f&#39;Processing {state_name}&#39;) new, smoothed = prepare_cases(cases) print(&#39; tGetting Posteriors&#39;) try: posteriors = get_posteriors(smoothed) except: display(cases) print(&#39; tGetting HDIs&#39;) hdis = highest_density_interval(posteriors) print(&#39; tGetting most likely values&#39;) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis], axis=1) results[state_name] = result.droplevel(0) clear_output(wait=True) print(&#39;Done.&#39;) . Done. . Plot All Italian Regions . ncols = 3 nrows = int(np.ceil(len(results) / ncols)) # fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (state_name, result) in enumerate(results.items()): plot_rt(result, axes.flat[i], state_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . Export Data to CSV . overall = None for state_name, result in results.items(): r = result.copy() r.index = pd.MultiIndex.from_product([[state_name], result.index]) if overall is None: overall = r else: overall = pd.concat([overall, r]) overall.sort_index(inplace=True) # Uncomment this line if you&#39;d like to export overall.to_csv(&#39;data/rt.csv&#39;) . Standings . da adattare al caso italiano . # As of 4/12 no_lockdown = [] partial_lockdown = [] FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] . filtered = overall.index.get_level_values(0).isin(FILTERED_REGIONS) mr = overall.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High&#39;, &#39;Low&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by Region&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low&#39;, &#39;High&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) for bar, state_name in zip(bars, mr.index): if state_name in no_lockdown: bar.set_color(NONE_COLOR) if state_name in partial_lockdown: bar.set_color(PARTIAL_COLOR) labels = mr.index.to_series().replace({&#39;District of Columbia&#39;:&#39;DC&#39;}) ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) &quot;&quot;&quot; leg = ax.legend(handles=[ Patch(label=&#39;Partial&#39;, color=PARTIAL_COLOR), Patch(label=&#39;None&#39;, color=NONE_COLOR), Patch(label=&#39;Full&#39;, color=FULL_COLOR) ], title=&#39;Lockdown&#39;, ncol=3, loc=&#39;upper left&#39;, columnspacing=.75, handletextpad=.5, handlelength=1) leg._legend_box.align = &quot;left&quot; &quot;&quot;&quot; fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr); . mr.sort_values(&#39;High&#39;, inplace=True) plot_standings(mr); . show = mr[mr.High.le(1.1)].sort_values(&#39;ML&#39;) fig, ax = plot_standings(show, title=&#39;Likely Under Control&#39;); . show = mr[mr.Low.ge(1.05)].sort_values(&#39;Low&#39;) fig, ax = plot_standings(show, title=&#39;Likely Not Under Control&#39;); # ax.get_legend().remove() . Original stuff . la robina fatta da me . url = &#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv&#39; states = pd.read_csv(url, #usecols=[0, 3, 10, 12, 14], usecols=[0, 1, 3], # index_col= [ &#39;denominazione_regione&#39;, &#39;totale_positivi&#39;, &#39;deceduti&#39;], #header = 0, #names = [&#39;data&#39;, &#39;denominazione_regione&#39;, &#39;totale_positivi&#39;, &#39;deceduti&#39;], index_col = [&#39;state&#39;, &#39;date&#39;], parse_dates=[&#39;state&#39;], squeeze=True).sort_index() . Total cases at 2020-04-12 in Italy(by region) vs the Us(by state): . it&#39;s a check that the data are correct, and indeed the check is positive. . print(&#39;Total cases in IT = {}&#39;.format(regions[:, &#39;2020-04-16 17:00:00&#39;].sum())) print(&#39;Total cases in US = {} n&#39;.format(states[:, &#39;2020-04-16&#39;].sum())) #print(regions[:, &#39;2020-04-12 17:00:00&#39;].sort_values()) #print(states[:, &#39;2020-04-12&#39;].sort_values()) . Total cases in IT = 168941 Total cases in US = 668532 . regions[&#39;Umbria&#39;].iloc[-10:] . data 2020-04-08 17:00:00 1289 2020-04-09 17:00:00 1298 2020-04-10 17:00:00 1302 2020-04-11 17:00:00 1309 2020-04-12 17:00:00 1319 2020-04-13 17:00:00 1320 2020-04-14 17:00:00 1321 2020-04-15 17:00:00 1322 2020-04-16 17:00:00 1329 2020-04-17 17:00:00 1337 Name: totale_casi, dtype: int64 .",
            "url": "https://nicoloval.github.io/fp_test/2020/04/20/realtime_R0.html",
            "relUrl": "/2020/04/20/realtime_R0.html",
            "date": " • Apr 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nicoloval.github.io/fp_test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nicoloval.github.io/fp_test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a nice fellow, who likes to play the piano and the keyboard. .",
          "url": "https://nicoloval.github.io/fp_test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nicoloval.github.io/fp_test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}